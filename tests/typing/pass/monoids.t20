;; Monoids.
(define-typename (Monoid 'a)
  (* 'a [-> 'a 'a 'a]))

(: make (-> 'a [-> 'a 'a 'a] [Monoid 'a]))
(define (make z <>) (, z <>))

(: m-plus (Monoid Int))
(define m-plus (make 0 +))

(: m-times (Monoid Int))
(define m-times (make 1 *))

(: m-string (Monoid String))
(define m-string (make "" String.concat))

(: m-and (Monoid Bool))
(define m-and (make #t &&))

(: m-or (Monoid Bool))
(define m-or (make #f ||))

(define-datatype (Option 'a)
  [none]
  [some 'a])

(: m-option [-> (Monoid 'a) (Monoid (Option 'a))])
(define (m-option (, z <>))
  (make
   none
   (lambda (x? y?)
     (some (match x?
       [(none) (match y?
                 [(none) z]
                 [(some y') y'])]
       [(some x') (match y?
                    [(none) x']
                    [(some y') (<> x' y')])])))))

(: option-test (Option Int))
(define option-test
  (let ([(, _ <>) (m-option m-plus)])
    (<> (some 2) (<> none (some 40)))))

(: option-map (forall ('a 'b) (-> [-> 'a 'b] [Option 'a] [Option 'b])))
(define (option-map f x?)
  (match x?
    [(none) none]
    [(some x) (some (f x))]))

(: int-of-bool (-> Bool Int))
(define (int-of-bool b)
  (if b 1 0))

(: option-test2 (Option Int))
(define option-test2
  (let ([(, _ <>) (m-option m-times)]
        [one (option-map int-of-bool (some #t))])
    (<> (some 2) (<> (<> none one) (some 40)))))
