;; Typing functions.

;; (: id (-> 'a 'a))
;; (define (id x) x)

;; (: id-eta' (-> 'a 'a))
;; (define id-eta'
;;   (lambda (x)
;;     (id x)))

;; (: id' (-> 'a 'a))
;; (define id' (id-eta' id))

;; (define-datatype (List 'a)
;;   [cons 'a (List 'a)]
;;   [nil]
;;   (derive! Foldable Mappable))

;; ;; (: flip (-> [-> 'a 'b 'c] [-> 'b 'a 'c]))
;; ;; (define (flip f)
;; ;;   (lambda (y x)
;; ;;     (f x y)))

;; ;; (: list-reverse (-> [List 'a] [List 'a]))
;; ;; (define (list-reverse xs)
;; ;;   (fold-left (flip cons) xs nil))

;; ;; (: three-to-one (List Int))
;; ;; (define three-to-one
;; ;;   (list-reverse (cons 1 (cons 2 (cons 3 nil)))))

;; (: list-append (-> (List 'a) (List 'a) (List 'a)))
;; (define (list-append xs ys)
;;   (fold-right cons xs ys))

;; (: wrong (List 'a))
;; (define wrong
;;   (list-append (cons 1 nil) (cons "1" nil)))

(: wrong 'a)
(define wrong 1)
